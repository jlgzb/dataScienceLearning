names(mtcars)
fitCar1 <- lm(mpg ~ fator(cyl) + wt, data = mtcars)
fitCar1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary((fitCar1))
fitCar2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fitcar2)
summary(fitCar2)
summary(fitCar1)[, 1]
summary(fitCar2)[, 1]
summary(fitCar1)$coef
summary(fitCar2)$coef
fitCar3 <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
summary(fitCar3)$coef
library(swirl)
swirl()
rgp1()
rpg2()
rgp2()
head(swiss)
md1 <- lm(Fertility ~ ., data = swiss)
mdl <- lm(Fertility ~ ., data = swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Examination + Catholic Infant.Mortality, data = swiss)
mdl2 <- lm(Fertility ~ Agriculture + Examination + Catholic + Infant.Mortality, data = swiss)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
simbias()
x1c <- simbias()\
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3)) / 2
n / d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds) / (1 + exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson(, hits))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704, ]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- lm(visits+1 ~ date, poisson, hits)
mdl2 <- lm(simplystats ~ Visits + 1, poisson, hits)
mdl2 <- lm(Visits ~ date, poisson, hits)
mdl2 <- lm(Visits ~ date, hits)
mdl2 <- lm(visits ~ date, hits)
mdl2 <- glm(simplysits ~ date, poisson, hits, offset = log(visits +1))
mdl2 <- glm(simplystats ~ date, poisson, hits, offset = log(visits +1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
fit <- glm(use ~ wind, family = "binomial", shuttle)
summary(fit)
fit2 <- glm(use ~ wind + magn, binomial, shuttle)
summary(fit2)
fit3 <- glm((1-use) ~ wind, binomial, shuttle)
fit <- glm(use ~ wind, shuttle)
fit <- glm(use ~ wind, binomial, shuttle)
library(UsingR)
data("InsectSprays")
data(InsectSprays)
head(InsectSprays)
fit4 <- glm(count ~ spray, poisson, InsectSprays)
summary(fit4)
fit4 <- glm(count ~ sprayB, poisson, InsectSprays)
fit4 <- glm(count ~ spray, poisson, InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit6 <- glm(y ~ x, poission, cbind(x = x, y = y))
shuttle$auto <- 1 * (shuttle$use == "auto")
shuttle$headwind <- 1 * (shuttle$wind == "head")
fit1 <- glm(auto ~ headwind, family = binomial, data = shuttle)
exp(coef(fit))
fit1_same <- glm(relevel(use, "noauto") ~ relevel(wind, "tail"), family = binomial, shuttle)
exp(coef(fit))
fit4 <- glm(count ~ relevel(spray, "B"), poisson, InsectSprays)
exp(coef(fit))
exp(coef(fit4))
exp(coef(fit_same))
exp(coef(fit1_same))
exp(coef(fit1))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit <- lm(y ~ x + z)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
sum(coef(fit))[2:3]
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
sum(coef(fit))[2:3]
sum(coef(fit[2:3]))
sum(coef(fit)[2:3])
library(UsingR)
data(mtcars)
head(mtcars)
fitCar <- lm(mpg ~ ., data = mtcars)
summary(fitCar)
coefCar <- summary(fitCar)$coef
coefCar
fitCyl <- lm(mpg ~ cyl, data = mtcars)
summary(fitCyl)$coef
str(mtcars)
?mtcars
table(mtcars$cyl)
table(mtcars$vs)
table(mtcars$am)
table(mtcars$gear)
table(mtcars$carb)
mtcars$am <- as.factor(mtcars$am)
mtcars$auto <- 1 * (mtcars$am == 1)
table(mtcars$auto)
fitAm <- lm(mpg ~ am, mtcars)
summary(fitAm)
plot(mpg ~ am,
data = mtcars,
main = "Mpg by transmission type",
xlab = "Transmission type",
ylab = "Miles per gallon")
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MTCars")
# inference
## t-test
t.test(mpg ~ am, data = mtcars)
wilcox.test(mpg ~ am, data = mtcars)
model.all <- lm(mpg ~ ., data = mtcars)
model <- step(model.all)
summary(model)
fit_full <- lm(mpg ~ ., mtcars)
summary(fit_full)$coef
fit_wt_am <- lm(mpt ~ . - wt, mtcars)
fit_wt_am <- lm(mpt ~ . -wt, mtcars)
fit_wt_am <- lm(mpg ~ . -wt, mtcars)
summary(fit_wt_am)$coef
t_test <- t.test(mpg ~ am)
t_test <- t.test(mpg ~ am, data = mtcars)
summary(t_test)
t_test <- t.test(mpg ~ am, data = mtcars)
t_test
t_test <- t.test(mpg ~ am, data = mtcars)
t_test$estimate
fitAm <- lm(mpg ~ am, data = mtcars)
summary(fitAm)$coef
fitAmCyl <- lm(mpg ~ am + cyl, data = mtcars)
summary(fitAmCyl)$coef
annova(fitAm, fitAmCyl, fitAmCylWt)
anova(fitAm, fitAmCyl, fitAmCylWt)
anova(fitAm, fitAmCyl, fitAmCylWt)
fitAmCylWt <- lm(mpg ~ am + cyl + wt, data = mtcars)
summary(fitAmCylWt)$coef
anova(fitAm, fitAmCyl, fitAmCylWt)
fitACWC <- lm(mpg ~ am + cyl + wt + carb, data = mtcars)
summary(fitACWC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
dim(training)
variables <- names(training)
variables
variables[58:69]
preProc <- preProcess(log10(training[, 58:69] + 1), method = 'pca')
preProc
trainPC <- predict(preProc, log10(training[, 58:69] + 1))
preProc <- preProcess(log10(training[, 58:69] + 1), method = 'pca')
new_training <- training[, c(1,58:69)]
dim(new_training)
fit_5_1 <- glm(diagnosis ~ ., data = new_training)
str(new_training)
fit_5_1 <- train(new_training$diagnosis ~ ., method = "glm", data = new_training)
install.packages("e1071")
library(e1071)
fit_5_1 <- train(new_training$diagnosis ~ ., method = "glm", data = new_training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data(caret)
df(segmentationOriginal)
dim(segmentationOriginal)
if (!file.exists("./database")) {
dir.create("./database")
}
# download uci mashroom data
if (!file.exists("uci_mashroom.txt")) {
datUrl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(datUrl, destfile = "./database/uci_mashroom.txt")
}
datRaw <- read.csv(./database/uci_mashroom.txt,
header = FALSE,
na.strings = '?',
quote = "")
datRaw <- read.csv("./database/uci_mashroom.txt",
header = FALSE,
na.strings = '?',
quote = "")
head(datRaw)
getwd()
setwd("E:/gzb/dataSciencLearning/uci_mashroom")
if (!file.exists("./database")) {
dir.create("./database")
}
# download uci mashroom data
if (!file.exists("uci_mashroom.txt")) {
datUrl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(datUrl, destfile = "./database/uci_mashroom.txt")
}
library(dplyr)
# use to read data from html
#library(htmlTable)
library(magrittr)
library(kableExtra)
datRaw <- read.csv("./database/uci_mashroom.txt",
header = FALSE,
na.strings = '?',
quote = "")
if (!file.exists("./database")) {
dir.create("./database")
}
# download uci mashroom data
if (!file.exists("./database/uci_mashroom.txt")) {
datUrl <- "https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"
download.file(datUrl, destfile = "./database/uci_mashroom.txt")
}
library(dplyr)
# use to read data from html
#library(htmlTable)
library(magrittr)
library(kableExtra)
datRaw <- read.csv("./database/uci_mashroom.txt",
header = FALSE,
na.strings = '?',
quote = "")
head(datRaw) %>% kable()
head(datRaw) %>% kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
scroll_box(width="100%", height = "300px")
mash_dictionary_df <- as.data.frame(read.table("./database/data_dictory.txt",
row.names = 1,
header = TRUE,
sep = "\t"))
head(mash_dictionary_df)
dim(mash_dictionary_df)
rownames(mash_dictionary_df)
mash_dictionary_df
mash_dictionary_df <- cbind(Variable=rownames(mash_dictionary_df), mash_dictionary_df)
head(mash_dictionary_df)
dim(mash_dictionary_df)
head(mash_dictionary_df)
head(mash_dictionary_df)
mash_dictionary_df
mash_dictionary_df
mash_dictionary_df <- as.data.frame(read.table("./database/data_dictory.txt",
header = TRUE,
sep = "\t"))
dim(mash_dictionary_df)
head(mash_dictionary_df)
mash_dictionary_df
variable_name <- mash_dictionary_df[, 1]
variable_value <- mash_dictionary_df[, 2]
head(variable_name)
variable_values <- mash_dictionary_df[, 2]
dict_new <- cbind(Variable=variable_name, Values=variable_value)
dim(dict_new)
head(dict_new)
dict_new <- cbind.data.frame(Variable=variable_name, Values=variable_value)
head(dict_new)
head(dict_new)
colnames(mash_dictionary_df) <- c("Variable", "Values")
diff(mash_dictionary_df, dict_new)
mash_dictionary_df
dict_new
rownames(dict_new) <- NULL
dict_new
mash_dictionary_df[, 1:2]
mash_dictionary_df[, 1:2]
# renamed columns
names(datRaw)
dict_mash <- as.data.frame(read.table("./database/data_dictory.txt",
header = TRUE,
sep = "\t"))
colnames(dict_mash) <- c("Variable", "Values")
# renamed columns
names(datRaw) <- mash_dictionary_df$Variable
head(datRaw)
head(datRaw) %>% kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
scroll_box(width="100%", height = "300px")
#Attribute1: edible_poisonous
mashroom_df$edible_poisonous <- as.factor(mapvalues(mashroom_df$edible_poisonous,c("p","e"),c("poisonous","edible")))
#Attribute2: cap_shape
mashroom_df$cap_shape <- as.factor(mapvalues(mashroom_df$cap_shape,c("b","c","x","f","k","s"),c("bell","conical","convex","flat","knobbed","sunken")))
#Attribute3: cap_surface
mashroom_df$cap_surface <- as.factor(mapvalues(mashroom_df$cap_surface,c("f","g","y","s"),c("fibrous","grooves","scaly","smooth")))
#Attribute4: cap_color
mashroom_df$cap_color <- as.factor(mapvalues(mashroom_df$cap_color,c("n","b","c","g","r","p","u","e","w","y"),c("brown","buff","cinnamon","gray","green","pink","purple","red","white","yellow")))
#Attribute5: bruises?
mashroom_df$bruises <- as.factor(mapvalues(mashroom_df$bruises,c("t","f"),c("bruises","no")))
#Attribute6: odor
mashroom_df$odor <- as.factor(mapvalues(mashroom_df$odor,c("a","l","c","y","f","m","n","p","s"),c("almond","anise","creosote","fishy","foul","musty","none","pungent","spicy")))
#Attribute7: gill_attachment
mashroom_df$gill_attachment <- as.factor(mapvalues(mashroom_df$gill_attachment,c("a","d","f","n"),c("attached","descending","free","notched")))
#Attribute8: gill_spacing
mashroom_df$gill_spacing <- as.factor(mapvalues(mashroom_df$gill_spacing,c("c","w","d"),c("close","crowded","distant")))
#Attribute9: gill_size
mashroom_df$gill_size <- as.factor(mapvalues(mashroom_df$gill_size,c("b","n"),c("broad","narrow")))
#Attribute10: gill_color
mashroom_df$gill_color <- as.factor(mapvalues(mashroom_df$gill_color,c("k","n","b","h","g","r","o","p","u","e","w","y"),c("black","brown","buff","chocolate","gray","green","orange","pink","purple","red","white","yellow")))
#Attribute11: stalk_shape
mashroom_df$stalk_shape <- as.factor(mapvalues(mashroom_df$stalk_shape,c("e","t"),c("enlarging","tapering")))
#Attribute12: stalk_root
mashroom_df$stalk_root <- as.factor(mapvalues(mashroom_df$stalk_root,c("b","c","u","e","z","r","NA"),c("bulbous","club","cup","equal","rhizomorphs","rooted","missing")))
#Attribute13: stalk_surface_above_ring
mashroom_df$stalk_surface_above_ring <- as.factor(mapvalues(mashroom_df$stalk_surface_above_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute14: stalk_surface_below_ring
mashroom_df$stalk_surface_below_ring <- as.factor(mapvalues(mashroom_df$stalk_surface_below_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute15: stalk_color_above_ring
mashroom_df$stalk_color_above_ring <- as.factor(mapvalues(mashroom_df$stalk_color_above_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute16: stalk_color_below_ring
mashroom_df$stalk_color_below_ring <- as.factor(mapvalues(mashroom_df$stalk_color_below_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute17: veil_type
mashroom_df$veil_type <- as.factor(mapvalues(mashroom_df$veil_type,c("p","u"),c("partial","universal")))
#Attribute18: veil_color
mashroom_df$veil_color <- as.factor(mapvalues(mashroom_df$veil_color,c("n","o","w","y"),c("brown","orange","white","yellow")))
#Attribute19: ring_number
mashroom_df$ring_number <- as.factor(mapvalues(mashroom_df$ring_number,c("n","o","t"),c("none","one","two")))
#Attribute20: ring_type
mashroom_df$ring_type <- as.factor(mapvalues(mashroom_df$ring_type,c("c","e","f","l","n","p","s","z"),c("cobwebby","evanescent","flaring","large","none","pendant","sheathing","zone")))
#Attribute21: spore_print_color
mashroom_df$spore_print_color <- as.factor(mapvalues(mashroom_df$spore_print_color,c("k","n","b","h","r","o","u","w","y"),c("black","brown","buff","chocolate","green","orange","purple","white","yellow")))
#Attribute22: population
mashroom_df$population <- as.factor(mapvalues(mashroom_df$population,c("a","c","n","s","v","y"),c("abundant","clustered","numerous","scattered","several","solitary")))
#Attribute23: habitat
mashroom_df$habitat <- as.factor(mapvalues(mashroom_df$habitat,c("g","l","m","p","u","w","d"),c("grasses","leaves","meadows","paths","urban","waste","woods")))
head(mashroom_df) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#summary(mashroom_df)
#View(mashroom_df)
library(plyr)
#Attribute1: edible_poisonous
mashroom_df$edible_poisonous <- as.factor(mapvalues(mashroom_df$edible_poisonous,c("p","e"),c("poisonous","edible")))
#Attribute2: cap_shape
mashroom_df$cap_shape <- as.factor(mapvalues(mashroom_df$cap_shape,c("b","c","x","f","k","s"),c("bell","conical","convex","flat","knobbed","sunken")))
#Attribute3: cap_surface
mashroom_df$cap_surface <- as.factor(mapvalues(mashroom_df$cap_surface,c("f","g","y","s"),c("fibrous","grooves","scaly","smooth")))
#Attribute4: cap_color
mashroom_df$cap_color <- as.factor(mapvalues(mashroom_df$cap_color,c("n","b","c","g","r","p","u","e","w","y"),c("brown","buff","cinnamon","gray","green","pink","purple","red","white","yellow")))
#Attribute5: bruises?
mashroom_df$bruises <- as.factor(mapvalues(mashroom_df$bruises,c("t","f"),c("bruises","no")))
#Attribute6: odor
mashroom_df$odor <- as.factor(mapvalues(mashroom_df$odor,c("a","l","c","y","f","m","n","p","s"),c("almond","anise","creosote","fishy","foul","musty","none","pungent","spicy")))
#Attribute7: gill_attachment
mashroom_df$gill_attachment <- as.factor(mapvalues(mashroom_df$gill_attachment,c("a","d","f","n"),c("attached","descending","free","notched")))
#Attribute8: gill_spacing
mashroom_df$gill_spacing <- as.factor(mapvalues(mashroom_df$gill_spacing,c("c","w","d"),c("close","crowded","distant")))
#Attribute9: gill_size
mashroom_df$gill_size <- as.factor(mapvalues(mashroom_df$gill_size,c("b","n"),c("broad","narrow")))
#Attribute10: gill_color
mashroom_df$gill_color <- as.factor(mapvalues(mashroom_df$gill_color,c("k","n","b","h","g","r","o","p","u","e","w","y"),c("black","brown","buff","chocolate","gray","green","orange","pink","purple","red","white","yellow")))
#Attribute11: stalk_shape
mashroom_df$stalk_shape <- as.factor(mapvalues(mashroom_df$stalk_shape,c("e","t"),c("enlarging","tapering")))
#Attribute12: stalk_root
mashroom_df$stalk_root <- as.factor(mapvalues(mashroom_df$stalk_root,c("b","c","u","e","z","r","NA"),c("bulbous","club","cup","equal","rhizomorphs","rooted","missing")))
#Attribute13: stalk_surface_above_ring
mashroom_df$stalk_surface_above_ring <- as.factor(mapvalues(mashroom_df$stalk_surface_above_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute14: stalk_surface_below_ring
mashroom_df$stalk_surface_below_ring <- as.factor(mapvalues(mashroom_df$stalk_surface_below_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute15: stalk_color_above_ring
mashroom_df$stalk_color_above_ring <- as.factor(mapvalues(mashroom_df$stalk_color_above_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute16: stalk_color_below_ring
mashroom_df$stalk_color_below_ring <- as.factor(mapvalues(mashroom_df$stalk_color_below_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute17: veil_type
mashroom_df$veil_type <- as.factor(mapvalues(mashroom_df$veil_type,c("p","u"),c("partial","universal")))
#Attribute18: veil_color
mashroom_df$veil_color <- as.factor(mapvalues(mashroom_df$veil_color,c("n","o","w","y"),c("brown","orange","white","yellow")))
#Attribute19: ring_number
mashroom_df$ring_number <- as.factor(mapvalues(mashroom_df$ring_number,c("n","o","t"),c("none","one","two")))
#Attribute20: ring_type
mashroom_df$ring_type <- as.factor(mapvalues(mashroom_df$ring_type,c("c","e","f","l","n","p","s","z"),c("cobwebby","evanescent","flaring","large","none","pendant","sheathing","zone")))
#Attribute21: spore_print_color
mashroom_df$spore_print_color <- as.factor(mapvalues(mashroom_df$spore_print_color,c("k","n","b","h","r","o","u","w","y"),c("black","brown","buff","chocolate","green","orange","purple","white","yellow")))
#Attribute22: population
mashroom_df$population <- as.factor(mapvalues(mashroom_df$population,c("a","c","n","s","v","y"),c("abundant","clustered","numerous","scattered","several","solitary")))
#Attribute23: habitat
mashroom_df$habitat <- as.factor(mapvalues(mashroom_df$habitat,c("g","l","m","p","u","w","d"),c("grasses","leaves","meadows","paths","urban","waste","woods")))
head(mashroom_df) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#summary(mashroom_df)
#View(mashroom_df)
#Attribute1: edible_poisonous
datRaw$edible_poisonous <- as.factor(mapvalues(datRaw$edible_poisonous,c("p","e"),c("poisonous","edible")))
#Attribute2: cap_shape
datRaw$cap_shape <- as.factor(mapvalues(datRaw$cap_shape,c("b","c","x","f","k","s"),c("bell","conical","convex","flat","knobbed","sunken")))
#Attribute3: cap_surface
datRaw$cap_surface <- as.factor(mapvalues(datRaw$cap_surface,c("f","g","y","s"),c("fibrous","grooves","scaly","smooth")))
#Attribute4: cap_color
datRaw$cap_color <- as.factor(mapvalues(datRaw$cap_color,c("n","b","c","g","r","p","u","e","w","y"),c("brown","buff","cinnamon","gray","green","pink","purple","red","white","yellow")))
#Attribute5: bruises?
datRaw$bruises <- as.factor(mapvalues(datRaw$bruises,c("t","f"),c("bruises","no")))
#Attribute6: odor
datRaw$odor <- as.factor(mapvalues(datRaw$odor,c("a","l","c","y","f","m","n","p","s"),c("almond","anise","creosote","fishy","foul","musty","none","pungent","spicy")))
#Attribute7: gill_attachment
datRaw$gill_attachment <- as.factor(mapvalues(datRaw$gill_attachment,c("a","d","f","n"),c("attached","descending","free","notched")))
#Attribute8: gill_spacing
datRaw$gill_spacing <- as.factor(mapvalues(datRaw$gill_spacing,c("c","w","d"),c("close","crowded","distant")))
#Attribute9: gill_size
datRaw$gill_size <- as.factor(mapvalues(datRaw$gill_size,c("b","n"),c("broad","narrow")))
#Attribute10: gill_color
datRaw$gill_color <- as.factor(mapvalues(datRaw$gill_color,c("k","n","b","h","g","r","o","p","u","e","w","y"),c("black","brown","buff","chocolate","gray","green","orange","pink","purple","red","white","yellow")))
#Attribute11: stalk_shape
datRaw$stalk_shape <- as.factor(mapvalues(datRaw$stalk_shape,c("e","t"),c("enlarging","tapering")))
#Attribute12: stalk_root
datRaw$stalk_root <- as.factor(mapvalues(datRaw$stalk_root,c("b","c","u","e","z","r","NA"),c("bulbous","club","cup","equal","rhizomorphs","rooted","missing")))
#Attribute13: stalk_surface_above_ring
datRaw$stalk_surface_above_ring <- as.factor(mapvalues(datRaw$stalk_surface_above_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute14: stalk_surface_below_ring
datRaw$stalk_surface_below_ring <- as.factor(mapvalues(datRaw$stalk_surface_below_ring,c("f","y","k","s"),c("fibrous","scaly","silky","smooth")))
#Attribute15: stalk_color_above_ring
datRaw$stalk_color_above_ring <- as.factor(mapvalues(datRaw$stalk_color_above_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute16: stalk_color_below_ring
datRaw$stalk_color_below_ring <- as.factor(mapvalues(datRaw$stalk_color_below_ring,c("n","b","c","g","o","p","e","w","y"),c("brown","buff","cinnamon","gray","orange","pink","red","white","yellow")))
#Attribute17: veil_type
datRaw$veil_type <- as.factor(mapvalues(datRaw$veil_type,c("p","u"),c("partial","universal")))
#Attribute18: veil_color
datRaw$veil_color <- as.factor(mapvalues(datRaw$veil_color,c("n","o","w","y"),c("brown","orange","white","yellow")))
#Attribute19: ring_number
datRaw$ring_number <- as.factor(mapvalues(datRaw$ring_number,c("n","o","t"),c("none","one","two")))
#Attribute20: ring_type
datRaw$ring_type <- as.factor(mapvalues(datRaw$ring_type,c("c","e","f","l","n","p","s","z"),c("cobwebby","evanescent","flaring","large","none","pendant","sheathing","zone")))
#Attribute21: spore_print_color
datRaw$spore_print_color <- as.factor(mapvalues(datRaw$spore_print_color,c("k","n","b","h","r","o","u","w","y"),c("black","brown","buff","chocolate","green","orange","purple","white","yellow")))
#Attribute22: population
datRaw$population <- as.factor(mapvalues(datRaw$population,c("a","c","n","s","v","y"),c("abundant","clustered","numerous","scattered","several","solitary")))
#Attribute23: habitat
datRaw$habitat <- as.factor(mapvalues(datRaw$habitat,c("g","l","m","p","u","w","d"),c("grasses","leaves","meadows","paths","urban","waste","woods")))
head(datRaw) %>% kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% scroll_box(width="100%",height="300px")
#summary(datRaw)
#View(datRaw)
df_sub <- subset(datRaw, select=c(1,4,6,21,22,23))
head(datRaw) %>% kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
scroll_box(width="100%", height = "300px")
summary(df_sub) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
scroll_box(width = "100%", height = "300px")
df_sub$edible_poisonous_id <- as.integer(mapvalues(df_sub$edible_poisonous,c("poisonous","edible"),1:2))
df_sub$cap_color_id <- as.integer(mapvalues(df_sub$cap_color,c("brown","buff","cinnamon","gray","green","pink","purple","red","white","yellow"),1:10))
df_sub$odor_id <- as.integer(mapvalues(df_sub$odor,c("almond","anise","creosote","fishy","foul","musty","none","pungent","spicy"),1:9))
df_sub$spore_print_color_id <- as.integer(mapvalues(df_sub$spore_print_color,c("black","brown","buff","chocolate","green","orange","purple","white","yellow"),1:9))
df_sub$population_id <- as.integer(mapvalues(df_sub$population,c("abundant","clustered","numerous","scattered","several","solitary"),1:6))
df_sub$habitat_id <- as.integer(mapvalues(df_sub$habitat,c("grasses","leaves","meadows","paths","urban","waste","woods"),1:7))
str(df_sub)
df <- subset(sub_mashroom_df,select=c(7,8,9,10,11,12))
M <- cor(df)
corrplot(M, type = "upper", order = "hclust", sig.level = 0.01, insig = "blank")
df <- subset(df_sub,select=c(7,8,9,10,11,12))
M <- cor(df)
corrplot(M, type = "upper", order = "hclust", sig.level = 0.01, insig = "blank")
library(corrplot)
install.packages("corrplot")
library(corrplot)
df <- subset(df_sub,select=c(7,8,9,10,11,12))
M <- cor(df)
corrplot(M, type = "upper", order = "hclust", sig.level = 0.01, insig = "blank")
poison_mashroom_df <- subset(df_sub, df_sub$edible_poisonous == "poisonous" & df_sub$cap_color =="white" )
poison_habitat <- table(poison_mashroom_df$habitat)
poison_habitat_ratio <- poison_habitat/sum(poison_habitat)
barplot(poison_habitat_ratio, main="Habitat Distribution for Poisonous Mashrooms")
edible_mashroom_df <- subset(df_sub, df_sub$edible_poisonous == "edible" & df_sub$cap_color =="white" )
edible_habitat <- table(edible_mashroom_df$habitat)
edible_habitat_ratio <- edible_habitat/sum(edible_habitat)
barplot(edible_habitat_ratio, main="Habitat Distribution for Edible Mashrooms")
